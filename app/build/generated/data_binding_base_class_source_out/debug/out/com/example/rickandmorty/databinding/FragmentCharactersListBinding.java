// Generated by view binder compiler. Do not edit!
package com.example.rickandmorty.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.rickandmorty.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentCharactersListBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final RecyclerView rvCardCharacter;

  @NonNull
  public final Button searchButton;

  @NonNull
  public final EditText searchGender;

  @NonNull
  public final EditText searchName;

  @NonNull
  public final EditText searchSpecies;

  @NonNull
  public final EditText searchStatus;

  @NonNull
  public final Button undoSearchButton;

  private FragmentCharactersListBinding(@NonNull ConstraintLayout rootView,
      @NonNull RecyclerView rvCardCharacter, @NonNull Button searchButton,
      @NonNull EditText searchGender, @NonNull EditText searchName, @NonNull EditText searchSpecies,
      @NonNull EditText searchStatus, @NonNull Button undoSearchButton) {
    this.rootView = rootView;
    this.rvCardCharacter = rvCardCharacter;
    this.searchButton = searchButton;
    this.searchGender = searchGender;
    this.searchName = searchName;
    this.searchSpecies = searchSpecies;
    this.searchStatus = searchStatus;
    this.undoSearchButton = undoSearchButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCharactersListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCharactersListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_characters_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCharactersListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.rv_card_character;
      RecyclerView rvCardCharacter = ViewBindings.findChildViewById(rootView, id);
      if (rvCardCharacter == null) {
        break missingId;
      }

      id = R.id.search_button;
      Button searchButton = ViewBindings.findChildViewById(rootView, id);
      if (searchButton == null) {
        break missingId;
      }

      id = R.id.search_gender;
      EditText searchGender = ViewBindings.findChildViewById(rootView, id);
      if (searchGender == null) {
        break missingId;
      }

      id = R.id.search_name;
      EditText searchName = ViewBindings.findChildViewById(rootView, id);
      if (searchName == null) {
        break missingId;
      }

      id = R.id.search_species;
      EditText searchSpecies = ViewBindings.findChildViewById(rootView, id);
      if (searchSpecies == null) {
        break missingId;
      }

      id = R.id.search_status;
      EditText searchStatus = ViewBindings.findChildViewById(rootView, id);
      if (searchStatus == null) {
        break missingId;
      }

      id = R.id.undo_search_button;
      Button undoSearchButton = ViewBindings.findChildViewById(rootView, id);
      if (undoSearchButton == null) {
        break missingId;
      }

      return new FragmentCharactersListBinding((ConstraintLayout) rootView, rvCardCharacter,
          searchButton, searchGender, searchName, searchSpecies, searchStatus, undoSearchButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
