// Generated by view binder compiler. Do not edit!
package com.example.rickandmorty.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.rickandmorty.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentEpisodeDetailsBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final TextView charactersTextView;

  @NonNull
  public final TextView providedEpisodeAirDate;

  @NonNull
  public final RecyclerView providedEpisodeCharacters;

  @NonNull
  public final TextView providedEpisodeCreated;

  @NonNull
  public final TextView providedEpisodeEpisode;

  @NonNull
  public final TextView providedEpisodeId;

  @NonNull
  public final TextView providedEpisodeName;

  @NonNull
  public final TextView providedEpisodeUrl;

  private FragmentEpisodeDetailsBinding(@NonNull FrameLayout rootView,
      @NonNull TextView charactersTextView, @NonNull TextView providedEpisodeAirDate,
      @NonNull RecyclerView providedEpisodeCharacters, @NonNull TextView providedEpisodeCreated,
      @NonNull TextView providedEpisodeEpisode, @NonNull TextView providedEpisodeId,
      @NonNull TextView providedEpisodeName, @NonNull TextView providedEpisodeUrl) {
    this.rootView = rootView;
    this.charactersTextView = charactersTextView;
    this.providedEpisodeAirDate = providedEpisodeAirDate;
    this.providedEpisodeCharacters = providedEpisodeCharacters;
    this.providedEpisodeCreated = providedEpisodeCreated;
    this.providedEpisodeEpisode = providedEpisodeEpisode;
    this.providedEpisodeId = providedEpisodeId;
    this.providedEpisodeName = providedEpisodeName;
    this.providedEpisodeUrl = providedEpisodeUrl;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentEpisodeDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentEpisodeDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_episode_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentEpisodeDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.charactersTextView;
      TextView charactersTextView = ViewBindings.findChildViewById(rootView, id);
      if (charactersTextView == null) {
        break missingId;
      }

      id = R.id.providedEpisodeAirDate;
      TextView providedEpisodeAirDate = ViewBindings.findChildViewById(rootView, id);
      if (providedEpisodeAirDate == null) {
        break missingId;
      }

      id = R.id.providedEpisodeCharacters;
      RecyclerView providedEpisodeCharacters = ViewBindings.findChildViewById(rootView, id);
      if (providedEpisodeCharacters == null) {
        break missingId;
      }

      id = R.id.providedEpisodeCreated;
      TextView providedEpisodeCreated = ViewBindings.findChildViewById(rootView, id);
      if (providedEpisodeCreated == null) {
        break missingId;
      }

      id = R.id.providedEpisodeEpisode;
      TextView providedEpisodeEpisode = ViewBindings.findChildViewById(rootView, id);
      if (providedEpisodeEpisode == null) {
        break missingId;
      }

      id = R.id.providedEpisodeId;
      TextView providedEpisodeId = ViewBindings.findChildViewById(rootView, id);
      if (providedEpisodeId == null) {
        break missingId;
      }

      id = R.id.providedEpisodeName;
      TextView providedEpisodeName = ViewBindings.findChildViewById(rootView, id);
      if (providedEpisodeName == null) {
        break missingId;
      }

      id = R.id.providedEpisodeUrl;
      TextView providedEpisodeUrl = ViewBindings.findChildViewById(rootView, id);
      if (providedEpisodeUrl == null) {
        break missingId;
      }

      return new FragmentEpisodeDetailsBinding((FrameLayout) rootView, charactersTextView,
          providedEpisodeAirDate, providedEpisodeCharacters, providedEpisodeCreated,
          providedEpisodeEpisode, providedEpisodeId, providedEpisodeName, providedEpisodeUrl);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
